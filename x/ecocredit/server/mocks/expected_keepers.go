// Code generated by MockGen. DO NOT EDIT.
// Source: x/ecocredit/server/expected_keepers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	core "github.com/regen-network/regen-ledger/x/ecocredit/core"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// NewCreditType mocks base method.
func (m *MockKeeper) NewCreditType(ctx types.Context, ctp *core.CreditTypeProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreditType", ctx, ctp)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewCreditType indicates an expected call of NewCreditType.
func (mr *MockKeeperMockRecorder) NewCreditType(ctx, ctp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreditType", reflect.TypeOf((*MockKeeper)(nil).NewCreditType), ctx, ctp)
}

// PruneOrders mocks base method.
func (m *MockKeeper) PruneOrders(ctx types.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneOrders", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneOrders indicates an expected call of PruneOrders.
func (mr *MockKeeperMockRecorder) PruneOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneOrders", reflect.TypeOf((*MockKeeper)(nil).PruneOrders), ctx)
}
